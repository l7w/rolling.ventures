{"version":3,"sources":["../../index.tsx","../node_modules/dayjs/dayjs.min.js","../node_modules/@fortawesome/free-regular-svg-icons/faFilePdf.js"],"names":["n","e","t","i","MAX","HIGH","MED","LOW","MIN","a","reduce","r","toLowerCase","class","for","o","amp","apos","gt","lt","nbsp","quot","l","c","u","s","d","f","p","h","m","g","y","k","v","x","b","C","S","w","E","z","L","A","T","$","B","O","M","R","I","U","D","N","j","H","P","F","_","G","W","Z","q","Q","V","X","RegExp","J","K","Y","ee","re","ne","te","ie","ae","oe","le","ce","ue","se","de","fe","pe","he","me","ge","ye","ke","ve","xe","be","match","exec","prevCapture","list","inline","simple","order","parse","replace","items","map","length","indexOf","ordered","start","render","key","type","Ce","Se","we","Ee","concat","ze","Le","test","Ae","inTable","push","apply","trim","split","filter","Boolean","forEach","Te","align","cells","header","children","$e","textAlign","Be","Oe","Me","Re","Ie","every","some","trimEnd","Ue","decodeURIComponent","De","Ne","je","He","Pe","Fe","_e","Ge","slice","call","arguments","join","We","shift","Ze","qe","overrides","createElement","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","sanitizer","slugify","namedCodesToUnicode","alert","unshift","attrs","text","noInnerParse","tag","lang","footnote","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","inAnchor","alt","title","src","disableAutoLink","ref","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","Array","isArray","options","module","exports","name","weekdays","months","ordinal","String","utcOffset","Math","abs","floor","date","year","month","clone","add","ceil","ms","args","locale","$L","utc","$u","$x","$offset","this","prototype","$d","Date","NaN","UTC","init","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","toString","isSame","startOf","endOf","isAfter","isBefore","$g","set","unix","valueOf","getTime","toDate","$locale","weekStart","$set","min","daysInMonth","get","Number","round","subtract","format","invalidDate","meridiem","monthsShort","weekdaysMin","weekdaysShort","getTimezoneOffset","diff","toJSON","toISOString","toUTCString","extend","$i","isDayjs","en","Ls","defineProperty","value","aliases","svgPathData","definition","prefix","iconName","icon","faFilePdf","width","height","ligatures","unicode"],"mappings":"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","file":"static/js/4.c690b87f.chunk.js","sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    state.prevCapture = state.prevCapture || ''\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n\n        const capture = rule.match(source, state)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n\n          // retain what's been processed so far for lookbacks\n          state.prevCapture += currCaptureString\n\n          source = source.substring(currCaptureString.length)\n\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n          break\n        }\n\n        i++\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(source: string, state: MarkdownToJSX.State) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    line += '\\n'\n\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n\n    match += line\n\n    return !!line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return options.createElement(\n      wrapper,\n      { key: 'outer' },\n      jsx\n    ) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' +\n            options.slugify(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) {\n          return null\n        }\n\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=\"$isDayjsObject\",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return b.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return b.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return b.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return b.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return b.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return b.s(e.$s,2,\"0\");case\"SSS\":return b.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'far';\nvar iconName = 'file-pdf';\nvar width = 512;\nvar height = 512;\nvar aliases = [];\nvar unicode = 'f1c1';\nvar svgPathData = 'M64 464l48 0 0 48-48 0c-35.3 0-64-28.7-64-64L0 64C0 28.7 28.7 0 64 0L229.5 0c17 0 33.3 6.7 45.3 18.7l90.5 90.5c12 12 18.7 28.3 18.7 45.3L384 304l-48 0 0-144-80 0c-17.7 0-32-14.3-32-32l0-80L64 48c-8.8 0-16 7.2-16 16l0 384c0 8.8 7.2 16 16 16zM176 352l32 0c30.9 0 56 25.1 56 56s-25.1 56-56 56l-16 0 0 32c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-48 0-80c0-8.8 7.2-16 16-16zm32 80c13.3 0 24-10.7 24-24s-10.7-24-24-24l-16 0 0 48 16 0zm96-80l32 0c26.5 0 48 21.5 48 48l0 64c0 26.5-21.5 48-48 48l-32 0c-8.8 0-16-7.2-16-16l0-128c0-8.8 7.2-16 16-16zm32 128c8.8 0 16-7.2 16-16l0-64c0-8.8-7.2-16-16-16l-16 0 0 96 16 0zm80-112c0-8.8 7.2-16 16-16l48 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0 0 32 32 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-32 0 0 48c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-64 0-64z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    aliases,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faFilePdf = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = aliases;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;\nexports.aliases = aliases;"],"sourceRoot":""}